using CoinCounting;
using NUnit.Framework;
using System;
using System.IO;
using System.Text;
using System.Linq;
namespace Validators
{
    public class Validators
    {
        [SetUp]
        public void Setup()
        {

        }

        [TestCase(new int[] { 1, 1, 1 }, new int[] { 2, 5, 3 })]
        [TestCase(new int[] { 1, 2, 3 }, new int[] { 5, 2, 4 })]
        [TestCase(new int[] { 1, 2, 3, 5, 3 }, new int[] { 3, 6, 5, 2, 4 })]
        public void TestStackGeneration(int[] nbOfCoins, int[] values)
        {
            var obtained = new Program.Processers.StackProcesser().CreateStructure(nbOfCoins, values);
            //We reverse zipped array even thou it's sorted correctly because we're in a LIFO struct when creating stack to compare so elements need to be inserted from enumerable in reverse order
            Assert.AreEqual(new System.Collections.Generic.Stack<(int, int)>(Program.Sorts.ZipThenOrder(nbOfCoins, values).Reverse()), obtained);
        }
        /* CodingGame tests 2 
         18
139
1
54
8
 ^^^^^^ CodingGameTest \ C# test vvvvvvv
[TestCase(18, 139, 1,  new int[] { 54 },  new int[] { 8 })]
13
86
2
59 87
9 7
 ^^^^^^ CodingGameTest \ C# test vvvvvvv
[TestCase(13, 86, 2,  new int[] { 59, 87 },  new int[] { 9, 7 })]
65
124
3
67 44 56
9 0 6
 ^^^^^^ CodingGameTest \ C# test vvvvvvv
[TestCase(65, 124, 3,  new int[] { 67, 44, 56 },  new int[] { 9, 0, 6 })]
26
130
4
98 19 23 75
5 7 7 9
 ^^^^^^ CodingGameTest \ C# test vvvvvvv
[TestCase(26, 130, 4,  new int[] { 98, 19, 23, 75 },  new int[] { 5, 7, 7, 9 })]
98
7
5
4 92 18 96 94
8 2 9 2 0
 ^^^^^^ CodingGameTest \ C# test vvvvvvv
[TestCase(98, 7, 5,  new int[] { 4, 92, 18, 96, 94 },  new int[] { 8, 2, 9, 2, 0 })]
         */
        #region MassiveCodingGameTest
        /* 
         2338
366
1000
32 994 135 260 782 17 965 400 401 745 144 83 656 944 942 703 542 131 575 190 381 176 988 942 236 888 466 785 40 866 5 981 418 274 119 479 893 368 506 914 609 223 817 713 336 585 870 24 530 739 512 699 453 757 850 452 283 866 386 288 727 330 29 853 389 888 460 8 969 585 20 87 882 579 550 716 986 818 29 519 211 456 426 110 34 547 313 273 190 492 545 73 317 972 491 797 407 996 570 729 428 971 520 272 451 113 598 688 272 122 545 832 743 582 283 312 585 824 811 226 925 479 322 865 130 503 717 368 148 829 289 554 643 269 703 288 309 255 519 330 39 107 81 347 988 934 712 20 170 544 953 495 208 426 939 495 498 440 404 679 888 716 131 562 853 328 672 854 241 816 545 624 859 223 979 380 793 86 650 762 22 615 174 369 188 139 204 952 58 151 769 593 220 372 742 643 607 926 921 344 600 486 583 577 181 935 877 542 29 805 839 919 26 190 879 233 237 835 894 430 877 131 769 412 856 598 805 561 371 388 537 538 491 357 92 614 205 123 582 928 234 929 520 184 707 839 39 569 638 702 345 852 52 579 918 549 286 199 151 753 948 104 224 368 87 451 106 271 918 722 160 19 79 269 154 342 817 637 470 741 386 142 754 74 407 755 15 227 9 493 140 796 666 876 83 132 393 807 852 877 411 213 193 559 36 255 274 634 722 368 858 618 379 14 157 161 656 24 213 395 863 829 734 62 171 128 182 261 393 112 833 538 880 378 404 206 362 328 514 684 190 360 811 77 203 854 185 589 468 628 918 799 223 818 215 165 76 428 404 946 569 655 374 122 515 696 470 458 392 823 989 696 978 564 873 547 360 399 270 317 126 878 245 506 238 83 588 112 212 646 587 134 841 388 817 964 924 728 28 105 828 548 41 177 931 859 101 848 753 431 408 233 152 738 480 706 201 743 126 867 26 138 417 841 191 875 404 846 177 832 929 241 788 882 521 270 297 328 68 394 383 470 465 671 988 534 312 774 896 377 663 845 576 345 426 243 998 719 803 944 706 407 47 614 598 984 429 918 964 516 401 341 920 675 894 284 594 504 861 173 841 380 229 725 614 847 444 688 686 41 17 590 577 310 727 107 738 804 102 432 98 364 624 504 581 275 479 966 10 412 555 640 273 47 269 440 344 592 215 830 26 40 407 253 676 738 801 958 344 651 560 774 556 443 663 296 89 922 728 725 278 528 514 935 204 360 250 705 587 346 809 841 319 49 581 192 45 272 134 499 175 51 915 543 932 807 806 106 168 12 296 724 396 460 343 987 918 218 859 658 410 122 517 294 593 377 971 94 54 725 967 360 979 490 400 637 200 660 584 388 341 857 906 559 695 213 904 922 631 803 757 310 78 572 235 85 65 475 535 186 528 78 231 90 594 897 207 805 575 984 132 696 19 232 288 745 717 656 411 856 454 203 732 764 295 975 228 859 359 742 335 668 318 515 485 752 182 795 106 110 363 953 33 679 816 467 164 347 524 789 624 313 69 851 595 46 322 136 479 381 257 697 393 650 890 425 336 310 372 395 635 108 690 499 574 178 301 295 221 794 981 57 155 717 446 8 685 479 647 541 627 886 439 180 270 766 998 306 308 233 715 813 913 799 873 751 851 236 676 213 587 75 991 27 971 374 171 483 286 335 936 353 626 900 471 773 638 175 678 793 935 790 533 323 517 671 521 927 125 543 826 367 800 426 129 44 665 220 751 566 278 934 476 672 407 16 938 78 85 32 144 943 219 682 417 829 904 199 264 45 318 632 558 666 81 40 357 949 688 441 725 148 508 188 267 36 785 26 532 221 308 637 598 956 169 439 50 330 449 983 463 298 10 294 84 377 535 588 94 648 785 942 842 611 203 118 918 795 758 34 315 358 672 498 989 131 181 553 695 636 58 236 999 349 142 209 337 51 483 976 946 408 169 156 877 66 853 171 694 293 372 829 940 391 917 925 309 404 935 555 246 623 486 542 810 523 550 410 961 214 934 322 448 859 154 159 18 672 572 490 231 902 559 634 862 597 517 15 716 825 327 876 173 378 998 511 361 198 874 339 653 301 876 448 245 847 712 172 275 164 77 13 449 476 520 831 452 8 696 867 880 690 412 420 148 874 483 404 869 299 492 803 230 478 739 352 588 476 169 687 977 295 185 804 517 327 729 502 273 85 981 870 209 56 782 347 957 134 971 151 859 481 531 695 560 550 353 625 362 561 572 905 790 399 229 269 280 732 223 76
184 462 295 360 537 14 136 582 407 809 109 281 873 881 264 744 385 484 400 735 181 595 507 705 568 119 424 438 508 203 138 687 636 168 607 112 910 540 917 938 958 61 778 109 169 968 102 496 331 858 905 859 799 882 182 65 185 188 118 662 524 592 314 498 791 440 627 246 81 321 571 13 385 517 654 372 535 579 532 419 796 71 959 443 310 0 525 718 121 172 861 401 539 375 830 346 640 170 162 744 371 738 317 506 163 608 582 64 172 841 212 317 770 144 261 360 468 5 696 319 507 94 586 9 993 459 267 176 976 110 472 630 458 41 686 699 669 156 30 525 227 290 28 509 387 594 550 266 321 327 202 339 352 35 536 544 966 71 384 702 178 714 465 3 43 465 855 333 152 778 22 135 863 256 605 677 390 365 440 464 729 512 203 132 635 896 766 14 763 883 704 949 589 920 874 349 157 880 354 927 785 335 908 633 278 724 143 524 928 887 597 929 286 156 755 565 238 60 880 4 341 911 594 566 422 615 437 197 598 48 923 719 88 712 29 353 329 328 950 55 587 310 760 690 176 458 25 398 212 755 967 120 9 598 435 420 680 457 320 966 686 845 688 345 400 325 536 260 838 837 307 875 370 634 360 424 654 538 170 724 89 274 8 568 299 60 737 46 832 555 261 0 733 430 333 389 436 54 185 238 656 831 467 443 480 35 146 653 960 808 33 424 171 438 994 493 840 63 374 393 416 391 316 353 193 586 43 847 949 834 99 371 607 833 884 481 886 258 250 601 575 716 108 39 726 124 248 75 135 891 994 244 959 872 357 587 949 411 857 293 421 845 150 559 91 80 317 571 86 28 598 295 373 241 981 640 55 242 514 278 177 277 665 377 571 374 450 832 758 975 603 721 757 481 295 316 317 784 659 469 949 835 447 806 21 758 269 918 599 520 367 472 146 432 210 796 495 211 319 621 564 731 941 782 771 42 491 216 674 544 185 356 464 182 349 421 327 417 441 594 260 210 206 125 676 274 949 643 957 80 741 565 574 724 168 406 501 632 830 452 265 70 173 958 240 981 778 855 74 238 840 205 403 372 353 779 78 991 808 200 132 623 460 992 123 415 179 592 912 598 616 302 818 847 497 359 800 543 338 69 766 745 611 281 946 743 297 631 479 870 701 706 362 353 908 0 900 277 597 870 856 366 832 719 398 187 60 889 910 993 719 282 393 910 752 789 167 255 70 120 302 347 994 144 838 970 108 2 628 458 488 895 689 748 161 220 622 664 758 106 392 743 288 982 689 896 989 980 700 562 323 735 692 298 851 683 863 780 184 308 3 628 865 307 410 949 657 386 115 912 666 812 150 160 716 866 621 859 675 789 779 761 494 554 37 239 852 934 563 4 917 343 816 36 812 719 205 238 767 597 437 349 66 793 544 698 582 669 310 149 175 477 492 126 786 229 468 154 112 60 235 760 806 627 857 665 694 689 575 820 875 726 793 910 149 204 202 235 590 135 965 419 475 986 236 418 90 211 814 685 676 144 708 495 786 805 824 600 592 234 351 591 994 499 192 88 828 957 758 261 869 589 207 874 460 891 647 570 79 151 140 398 338 57 82 298 120 239 964 57 562 669 734 221 955 103 579 215 81 561 705 161 577 336 270 885 305 138 808 213 983 162 971 539 784 432 593 775 766 164 454 15 593 883 432 185 297 438 193 180 360 808 160 485 597 29 668 203 713 420 366 911 757 689 943 674 811 179 55 482 531 934 459 539 895 426 391 691 65 374 564 289 365 108 38 678 724 371 425 994 591 759 861 282 16 167 971 53 789 318 580 85 698 218 615 532 541 610 977 699 277 991 510 147 210 822 47 544 203 654 924 546 960 560 508 925 370 696 800 658 800 735 847 583 471 670 549 955 391 855 883 735 10 523 128 362 589 47 528 350 828 832 358 438 175 3 319 615 696 139 864 49 317 152 698 633 361 888 770 172 0 273 904 166 248 779 793 408 809 52 629 152 164 113 609 119 765 814 184 463 940 320 97 148 739 586 345 384 583 670 856 941 377 898 967 601 432 417 807 516 419 495 247 169 752 363 102 980 908 713 223 922 275 994 172 75 853 956 344 600 526 414 363 195 817 104 471 865 53 486 822 116 438 122 102 288 642 118 155 308 929 311 463 924 280 744 979 782 411 815 562 392 452 742 534 221 265 487 970 891 733 277 173 165 30 106 696 330 152 656 226 280 354 675 955 418 441 245 994 569 799 279 402 299 338 738 164 56 883 212
         */
        #endregion
        public void Test<T>(int result, int valueToReach, int N, int[] nbOfCoins, int[] values) where T : Program.Processers.IProcesser, new()
        {
            var obtained = new T().Process(valueToReach, N, nbOfCoins, values);
            //Assert.AreEqual(consoleOut.ToString(), "Hello, World!");
            Assert.AreEqual(result, obtained);
        }
        //CodingGame Values
        /*
         -1
188
1
3
8
 ^^^^^^ CodingGameTest \ C# test vvvvvvv
[TestCase(-1, 188, 1,  new int[] { 3 },  new int[] { 8 })]
22
154
2
66 76
8 7
 ^^^^^^ CodingGameTest \ C# test vvvvvvv
[TestCase(22, 154, 2,  new int[] { 66, 76 },  new int[] { 8, 7 })]
-1
246
3
12 7 26
7 8 0
 ^^^^^^ CodingGameTest \ C# test vvvvvvv
[TestCase(-1, 246, 3,  new int[] { 12, 7, 26 },  new int[] { 7, 8, 0 })]
45
134
4
54 94 44 44
9 3 6 9
 ^^^^^^ CodingGameTest \ C# test vvvvvvv
[TestCase(45, 134, 4,  new int[] { 54, 94, 44, 44 },  new int[] { 9, 3, 6, 9 })]
121
366
5
94 90 71 23 82
6 2 8 6 9 
         */
        //Randomly generated
        [TestCase(7, 49, 1, new int[] { 89 }, new int[] { 8 })]
        [TestCase(-1, 188, 1, new int[] { 3 }, new int[] { 8 })]
        [TestCase(22, 154, 2, new int[] { 66, 76 }, new int[] { 8, 7 })]
        [TestCase(-1, 246, 3, new int[] { 12, 7, 26 }, new int[] { 7, 8, 0 })]
        [TestCase(45, 134, 4, new int[] { 54, 94, 44, 44 }, new int[] { 9, 3, 6, 9 })]
        [TestCase(121, 366, 5, new int[] { 94, 90, 71, 23, 82 }, new int[] { 6, 2, 8, 6, 9 })]
        //2nd Serie
        [TestCase(18, 139, 1, new int[] { 54 }, new int[] { 8 })]
        [TestCase(13, 86, 2, new int[] { 59, 87 }, new int[] { 9, 7 })]
        [TestCase(65, 124, 3, new int[] { 67, 44, 56 }, new int[] { 9, 0, 6 })]
        [TestCase(26, 130, 4, new int[] { 98, 19, 23, 75 }, new int[] { 5, 7, 7, 9 })]
        [TestCase(98, 7, 5, new int[] { 4, 92, 18, 96, 94 }, new int[] { 8, 2, 9, 2, 0 })]
        //HandMade
        [TestCase(3, 14, 2, new int[] { 2, 2 }, new int[] { 6, 5 })]
        [TestCase(3, 9, 1, new int[] { 3 }, new int[] { 4 })]
        #region MassiveTest
        [TestCase(2338, 366, 1000, new int[] { 32, 994, 135, 260, 782, 17, 965, 400, 401, 745, 144, 83, 656, 944, 942, 703, 542, 131, 575, 190, 381, 176, 988, 942, 236, 888, 466, 785, 40, 866, 5, 981, 418, 274, 119, 479, 893, 368, 506, 914, 609, 223, 817, 713, 336, 585, 870, 24, 530, 739, 512, 699, 453, 757, 850, 452, 283, 866, 386, 288, 727, 330, 29, 853, 389, 888, 460, 8, 969, 585, 20, 87, 882, 579, 550, 716, 986, 818, 29, 519, 211, 456, 426, 110, 34, 547, 313, 273, 190, 492, 545, 73, 317, 972, 491, 797, 407, 996, 570, 729, 428, 971, 520, 272, 451, 113, 598, 688, 272, 122, 545, 832, 743, 582, 283, 312, 585, 824, 811, 226, 925, 479, 322, 865, 130, 503, 717, 368, 148, 829, 289, 554, 643, 269, 703, 288, 309, 255, 519, 330, 39, 107, 81, 347, 988, 934, 712, 20, 170, 544, 953, 495, 208, 426, 939, 495, 498, 440, 404, 679, 888, 716, 131, 562, 853, 328, 672, 854, 241, 816, 545, 624, 859, 223, 979, 380, 793, 86, 650, 762, 22, 615, 174, 369, 188, 139, 204, 952, 58, 151, 769, 593, 220, 372, 742, 643, 607, 926, 921, 344, 600, 486, 583, 577, 181, 935, 877, 542, 29, 805, 839, 919, 26, 190, 879, 233, 237, 835, 894, 430, 877, 131, 769, 412, 856, 598, 805, 561, 371, 388, 537, 538, 491, 357, 92, 614, 205, 123, 582, 928, 234, 929, 520, 184, 707, 839, 39, 569, 638, 702, 345, 852, 52, 579, 918, 549, 286, 199, 151, 753, 948, 104, 224, 368, 87, 451, 106, 271, 918, 722, 160, 19, 79, 269, 154, 342, 817, 637, 470, 741, 386, 142, 754, 74, 407, 755, 15, 227, 9, 493, 140, 796, 666, 876, 83, 132, 393, 807, 852, 877, 411, 213, 193, 559, 36, 255, 274, 634, 722, 368, 858, 618, 379, 14, 157, 161, 656, 24, 213, 395, 863, 829, 734, 62, 171, 128, 182, 261, 393, 112, 833, 538, 880, 378, 404, 206, 362, 328, 514, 684, 190, 360, 811, 77, 203, 854, 185, 589, 468, 628, 918, 799, 223, 818, 215, 165, 76, 428, 404, 946, 569, 655, 374, 122, 515, 696, 470, 458, 392, 823, 989, 696, 978, 564, 873, 547, 360, 399, 270, 317, 126, 878, 245, 506, 238, 83, 588, 112, 212, 646, 587, 134, 841, 388, 817, 964, 924, 728, 28, 105, 828, 548, 41, 177, 931, 859, 101, 848, 753, 431, 408, 233, 152, 738, 480, 706, 201, 743, 126, 867, 26, 138, 417, 841, 191, 875, 404, 846, 177, 832, 929, 241, 788, 882, 521, 270, 297, 328, 68, 394, 383, 470, 465, 671, 988, 534, 312, 774, 896, 377, 663, 845, 576, 345, 426, 243, 998, 719, 803, 944, 706, 407, 47, 614, 598, 984, 429, 918, 964, 516, 401, 341, 920, 675, 894, 284, 594, 504, 861, 173, 841, 380, 229, 725, 614, 847, 444, 688, 686, 41, 17, 590, 577, 310, 727, 107, 738, 804, 102, 432, 98, 364, 624, 504, 581, 275, 479, 966, 10, 412, 555, 640, 273, 47, 269, 440, 344, 592, 215, 830, 26, 40, 407, 253, 676, 738, 801, 958, 344, 651, 560, 774, 556, 443, 663, 296, 89, 922, 728, 725, 278, 528, 514, 935, 204, 360, 250, 705, 587, 346, 809, 841, 319, 49, 581, 192, 45, 272, 134, 499, 175, 51, 915, 543, 932, 807, 806, 106, 168, 12, 296, 724, 396, 460, 343, 987, 918, 218, 859, 658, 410, 122, 517, 294, 593, 377, 971, 94, 54, 725, 967, 360, 979, 490, 400, 637, 200, 660, 584, 388, 341, 857, 906, 559, 695, 213, 904, 922, 631, 803, 757, 310, 78, 572, 235, 85, 65, 475, 535, 186, 528, 78, 231, 90, 594, 897, 207, 805, 575, 984, 132, 696, 19, 232, 288, 745, 717, 656, 411, 856, 454, 203, 732, 764, 295, 975, 228, 859, 359, 742, 335, 668, 318, 515, 485, 752, 182, 795, 106, 110, 363, 953, 33, 679, 816, 467, 164, 347, 524, 789, 624, 313, 69, 851, 595, 46, 322, 136, 479, 381, 257, 697, 393, 650, 890, 425, 336, 310, 372, 395, 635, 108, 690, 499, 574, 178, 301, 295, 221, 794, 981, 57, 155, 717, 446, 8, 685, 479, 647, 541, 627, 886, 439, 180, 270, 766, 998, 306, 308, 233, 715, 813, 913, 799, 873, 751, 851, 236, 676, 213, 587, 75, 991, 27, 971, 374, 171, 483, 286, 335, 936, 353, 626, 900, 471, 773, 638, 175, 678, 793, 935, 790, 533, 323, 517, 671, 521, 927, 125, 543, 826, 367, 800, 426, 129, 44, 665, 220, 751, 566, 278, 934, 476, 672, 407, 16, 938, 78, 85, 32, 144, 943, 219, 682, 417, 829, 904, 199, 264, 45, 318, 632, 558, 666, 81, 40, 357, 949, 688, 441, 725, 148, 508, 188, 267, 36, 785, 26, 532, 221, 308, 637, 598, 956, 169, 439, 50, 330, 449, 983, 463, 298, 10, 294, 84, 377, 535, 588, 94, 648, 785, 942, 842, 611, 203, 118, 918, 795, 758, 34, 315, 358, 672, 498, 989, 131, 181, 553, 695, 636, 58, 236, 999, 349, 142, 209, 337, 51, 483, 976, 946, 408, 169, 156, 877, 66, 853, 171, 694, 293, 372, 829, 940, 391, 917, 925, 309, 404, 935, 555, 246, 623, 486, 542, 810, 523, 550, 410, 961, 214, 934, 322, 448, 859, 154, 159, 18, 672, 572, 490, 231, 902, 559, 634, 862, 597, 517, 15, 716, 825, 327, 876, 173, 378, 998, 511, 361, 198, 874, 339, 653, 301, 876, 448, 245, 847, 712, 172, 275, 164, 77, 13, 449, 476, 520, 831, 452, 8, 696, 867, 880, 690, 412, 420, 148, 874, 483, 404, 869, 299, 492, 803, 230, 478, 739, 352, 588, 476, 169, 687, 977, 295, 185, 804, 517, 327, 729, 502, 273, 85, 981, 870, 209, 56, 782, 347, 957, 134, 971, 151, 859, 481, 531, 695, 560, 550, 353, 625, 362, 561, 572, 905, 790, 399, 229, 269, 280, 732, 223, 76 }, new int[] { 184, 462, 295, 360, 537, 14, 136, 582, 407, 809, 109, 281, 873, 881, 264, 744, 385, 484, 400, 735, 181, 595, 507, 705, 568, 119, 424, 438, 508, 203, 138, 687, 636, 168, 607, 112, 910, 540, 917, 938, 958, 61, 778, 109, 169, 968, 102, 496, 331, 858, 905, 859, 799, 882, 182, 65, 185, 188, 118, 662, 524, 592, 314, 498, 791, 440, 627, 246, 81, 321, 571, 13, 385, 517, 654, 372, 535, 579, 532, 419, 796, 71, 959, 443, 310, 0, 525, 718, 121, 172, 861, 401, 539, 375, 830, 346, 640, 170, 162, 744, 371, 738, 317, 506, 163, 608, 582, 64, 172, 841, 212, 317, 770, 144, 261, 360, 468, 5, 696, 319, 507, 94, 586, 9, 993, 459, 267, 176, 976, 110, 472, 630, 458, 41, 686, 699, 669, 156, 30, 525, 227, 290, 28, 509, 387, 594, 550, 266, 321, 327, 202, 339, 352, 35, 536, 544, 966, 71, 384, 702, 178, 714, 465, 3, 43, 465, 855, 333, 152, 778, 22, 135, 863, 256, 605, 677, 390, 365, 440, 464, 729, 512, 203, 132, 635, 896, 766, 14, 763, 883, 704, 949, 589, 920, 874, 349, 157, 880, 354, 927, 785, 335, 908, 633, 278, 724, 143, 524, 928, 887, 597, 929, 286, 156, 755, 565, 238, 60, 880, 4, 341, 911, 594, 566, 422, 615, 437, 197, 598, 48, 923, 719, 88, 712, 29, 353, 329, 328, 950, 55, 587, 310, 760, 690, 176, 458, 25, 398, 212, 755, 967, 120, 9, 598, 435, 420, 680, 457, 320, 966, 686, 845, 688, 345, 400, 325, 536, 260, 838, 837, 307, 875, 370, 634, 360, 424, 654, 538, 170, 724, 89, 274, 8, 568, 299, 60, 737, 46, 832, 555, 261, 0, 733, 430, 333, 389, 436, 54, 185, 238, 656, 831, 467, 443, 480, 35, 146, 653, 960, 808, 33, 424, 171, 438, 994, 493, 840, 63, 374, 393, 416, 391, 316, 353, 193, 586, 43, 847, 949, 834, 99, 371, 607, 833, 884, 481, 886, 258, 250, 601, 575, 716, 108, 39, 726, 124, 248, 75, 135, 891, 994, 244, 959, 872, 357, 587, 949, 411, 857, 293, 421, 845, 150, 559, 91, 80, 317, 571, 86, 28, 598, 295, 373, 241, 981, 640, 55, 242, 514, 278, 177, 277, 665, 377, 571, 374, 450, 832, 758, 975, 603, 721, 757, 481, 295, 316, 317, 784, 659, 469, 949, 835, 447, 806, 21, 758, 269, 918, 599, 520, 367, 472, 146, 432, 210, 796, 495, 211, 319, 621, 564, 731, 941, 782, 771, 42, 491, 216, 674, 544, 185, 356, 464, 182, 349, 421, 327, 417, 441, 594, 260, 210, 206, 125, 676, 274, 949, 643, 957, 80, 741, 565, 574, 724, 168, 406, 501, 632, 830, 452, 265, 70, 173, 958, 240, 981, 778, 855, 74, 238, 840, 205, 403, 372, 353, 779, 78, 991, 808, 200, 132, 623, 460, 992, 123, 415, 179, 592, 912, 598, 616, 302, 818, 847, 497, 359, 800, 543, 338, 69, 766, 745, 611, 281, 946, 743, 297, 631, 479, 870, 701, 706, 362, 353, 908, 0, 900, 277, 597, 870, 856, 366, 832, 719, 398, 187, 60, 889, 910, 993, 719, 282, 393, 910, 752, 789, 167, 255, 70, 120, 302, 347, 994, 144, 838, 970, 108, 2, 628, 458, 488, 895, 689, 748, 161, 220, 622, 664, 758, 106, 392, 743, 288, 982, 689, 896, 989, 980, 700, 562, 323, 735, 692, 298, 851, 683, 863, 780, 184, 308, 3, 628, 865, 307, 410, 949, 657, 386, 115, 912, 666, 812, 150, 160, 716, 866, 621, 859, 675, 789, 779, 761, 494, 554, 37, 239, 852, 934, 563, 4, 917, 343, 816, 36, 812, 719, 205, 238, 767, 597, 437, 349, 66, 793, 544, 698, 582, 669, 310, 149, 175, 477, 492, 126, 786, 229, 468, 154, 112, 60, 235, 760, 806, 627, 857, 665, 694, 689, 575, 820, 875, 726, 793, 910, 149, 204, 202, 235, 590, 135, 965, 419, 475, 986, 236, 418, 90, 211, 814, 685, 676, 144, 708, 495, 786, 805, 824, 600, 592, 234, 351, 591, 994, 499, 192, 88, 828, 957, 758, 261, 869, 589, 207, 874, 460, 891, 647, 570, 79, 151, 140, 398, 338, 57, 82, 298, 120, 239, 964, 57, 562, 669, 734, 221, 955, 103, 579, 215, 81, 561, 705, 161, 577, 336, 270, 885, 305, 138, 808, 213, 983, 162, 971, 539, 784, 432, 593, 775, 766, 164, 454, 15, 593, 883, 432, 185, 297, 438, 193, 180, 360, 808, 160, 485, 597, 29, 668, 203, 713, 420, 366, 911, 757, 689, 943, 674, 811, 179, 55, 482, 531, 934, 459, 539, 895, 426, 391, 691, 65, 374, 564, 289, 365, 108, 38, 678, 724, 371, 425, 994, 591, 759, 861, 282, 16, 167, 971, 53, 789, 318, 580, 85, 698, 218, 615, 532, 541, 610, 977, 699, 277, 991, 510, 147, 210, 822, 47, 544, 203, 654, 924, 546, 960, 560, 508, 925, 370, 696, 800, 658, 800, 735, 847, 583, 471, 670, 549, 955, 391, 855, 883, 735, 10, 523, 128, 362, 589, 47, 528, 350, 828, 832, 358, 438, 175, 3, 319, 615, 696, 139, 864, 49, 317, 152, 698, 633, 361, 888, 770, 172, 0, 273, 904, 166, 248, 779, 793, 408, 809, 52, 629, 152, 164, 113, 609, 119, 765, 814, 184, 463, 940, 320, 97, 148, 739, 586, 345, 384, 583, 670, 856, 941, 377, 898, 967, 601, 432, 417, 807, 516, 419, 495, 247, 169, 752, 363, 102, 980, 908, 713, 223, 922, 275, 994, 172, 75, 853, 956, 344, 600, 526, 414, 363, 195, 817, 104, 471, 865, 53, 486, 822, 116, 438, 122, 102, 288, 642, 118, 155, 308, 929, 311, 463, 924, 280, 744, 979, 782, 411, 815, 562, 392, 452, 742, 534, 221, 265, 487, 970, 891, 733, 277, 173, 165, 30, 106, 696, 330, 152, 656, 226, 280, 354, 675, 955, 418, 441, 245, 994, 569, 799, 279, 402, 299, 338, 738, 164, 56, 883, 212 })]
        #endregion
        public void TestStack(int result, int valueToReach, int N, int[] nbOfCoins, int[] values) => Test<Program.Processers.StackProcesser>(result, valueToReach, N, nbOfCoins, values);
        
        //Randomly generated
        [TestCase(7, 49, 1, new int[] { 89 }, new int[] { 8 })]
        [TestCase(-1, 188, 1, new int[] { 3 }, new int[] { 8 })]
        [TestCase(22, 154, 2, new int[] { 66, 76 }, new int[] { 8, 7 })]
        [TestCase(-1, 246, 3, new int[] { 12, 7, 26 }, new int[] { 7, 8, 0 })]
        [TestCase(45, 134, 4, new int[] { 54, 94, 44, 44 }, new int[] { 9, 3, 6, 9 })]
        [TestCase(121, 366, 5, new int[] { 94, 90, 71, 23, 82 }, new int[] { 6, 2, 8, 6, 9 })]
        //2nd Serie
        [TestCase(18, 139, 1, new int[] { 54 }, new int[] { 8 })]
        [TestCase(13, 86, 2, new int[] { 59, 87 }, new int[] { 9, 7 })]
        [TestCase(65, 124, 3, new int[] { 67, 44, 56 }, new int[] { 9, 0, 6 })]
        [TestCase(26, 130, 4, new int[] { 98, 19, 23, 75 }, new int[] { 5, 7, 7, 9 })]
        [TestCase(98, 7, 5, new int[] { 4, 92, 18, 96, 94 }, new int[] { 8, 2, 9, 2, 0 })]
        //HandMade
        [TestCase(3, 14, 2, new int[] { 2, 2 }, new int[] { 6, 5 })]
        [TestCase(3, 9, 1, new int[] { 3 }, new int[] { 4 })]
        #region MassiveTest
        [TestCase(2338, 366, 1000, new int[] { 32, 994, 135, 260, 782, 17, 965, 400, 401, 745, 144, 83, 656, 944, 942, 703, 542, 131, 575, 190, 381, 176, 988, 942, 236, 888, 466, 785, 40, 866, 5, 981, 418, 274, 119, 479, 893, 368, 506, 914, 609, 223, 817, 713, 336, 585, 870, 24, 530, 739, 512, 699, 453, 757, 850, 452, 283, 866, 386, 288, 727, 330, 29, 853, 389, 888, 460, 8, 969, 585, 20, 87, 882, 579, 550, 716, 986, 818, 29, 519, 211, 456, 426, 110, 34, 547, 313, 273, 190, 492, 545, 73, 317, 972, 491, 797, 407, 996, 570, 729, 428, 971, 520, 272, 451, 113, 598, 688, 272, 122, 545, 832, 743, 582, 283, 312, 585, 824, 811, 226, 925, 479, 322, 865, 130, 503, 717, 368, 148, 829, 289, 554, 643, 269, 703, 288, 309, 255, 519, 330, 39, 107, 81, 347, 988, 934, 712, 20, 170, 544, 953, 495, 208, 426, 939, 495, 498, 440, 404, 679, 888, 716, 131, 562, 853, 328, 672, 854, 241, 816, 545, 624, 859, 223, 979, 380, 793, 86, 650, 762, 22, 615, 174, 369, 188, 139, 204, 952, 58, 151, 769, 593, 220, 372, 742, 643, 607, 926, 921, 344, 600, 486, 583, 577, 181, 935, 877, 542, 29, 805, 839, 919, 26, 190, 879, 233, 237, 835, 894, 430, 877, 131, 769, 412, 856, 598, 805, 561, 371, 388, 537, 538, 491, 357, 92, 614, 205, 123, 582, 928, 234, 929, 520, 184, 707, 839, 39, 569, 638, 702, 345, 852, 52, 579, 918, 549, 286, 199, 151, 753, 948, 104, 224, 368, 87, 451, 106, 271, 918, 722, 160, 19, 79, 269, 154, 342, 817, 637, 470, 741, 386, 142, 754, 74, 407, 755, 15, 227, 9, 493, 140, 796, 666, 876, 83, 132, 393, 807, 852, 877, 411, 213, 193, 559, 36, 255, 274, 634, 722, 368, 858, 618, 379, 14, 157, 161, 656, 24, 213, 395, 863, 829, 734, 62, 171, 128, 182, 261, 393, 112, 833, 538, 880, 378, 404, 206, 362, 328, 514, 684, 190, 360, 811, 77, 203, 854, 185, 589, 468, 628, 918, 799, 223, 818, 215, 165, 76, 428, 404, 946, 569, 655, 374, 122, 515, 696, 470, 458, 392, 823, 989, 696, 978, 564, 873, 547, 360, 399, 270, 317, 126, 878, 245, 506, 238, 83, 588, 112, 212, 646, 587, 134, 841, 388, 817, 964, 924, 728, 28, 105, 828, 548, 41, 177, 931, 859, 101, 848, 753, 431, 408, 233, 152, 738, 480, 706, 201, 743, 126, 867, 26, 138, 417, 841, 191, 875, 404, 846, 177, 832, 929, 241, 788, 882, 521, 270, 297, 328, 68, 394, 383, 470, 465, 671, 988, 534, 312, 774, 896, 377, 663, 845, 576, 345, 426, 243, 998, 719, 803, 944, 706, 407, 47, 614, 598, 984, 429, 918, 964, 516, 401, 341, 920, 675, 894, 284, 594, 504, 861, 173, 841, 380, 229, 725, 614, 847, 444, 688, 686, 41, 17, 590, 577, 310, 727, 107, 738, 804, 102, 432, 98, 364, 624, 504, 581, 275, 479, 966, 10, 412, 555, 640, 273, 47, 269, 440, 344, 592, 215, 830, 26, 40, 407, 253, 676, 738, 801, 958, 344, 651, 560, 774, 556, 443, 663, 296, 89, 922, 728, 725, 278, 528, 514, 935, 204, 360, 250, 705, 587, 346, 809, 841, 319, 49, 581, 192, 45, 272, 134, 499, 175, 51, 915, 543, 932, 807, 806, 106, 168, 12, 296, 724, 396, 460, 343, 987, 918, 218, 859, 658, 410, 122, 517, 294, 593, 377, 971, 94, 54, 725, 967, 360, 979, 490, 400, 637, 200, 660, 584, 388, 341, 857, 906, 559, 695, 213, 904, 922, 631, 803, 757, 310, 78, 572, 235, 85, 65, 475, 535, 186, 528, 78, 231, 90, 594, 897, 207, 805, 575, 984, 132, 696, 19, 232, 288, 745, 717, 656, 411, 856, 454, 203, 732, 764, 295, 975, 228, 859, 359, 742, 335, 668, 318, 515, 485, 752, 182, 795, 106, 110, 363, 953, 33, 679, 816, 467, 164, 347, 524, 789, 624, 313, 69, 851, 595, 46, 322, 136, 479, 381, 257, 697, 393, 650, 890, 425, 336, 310, 372, 395, 635, 108, 690, 499, 574, 178, 301, 295, 221, 794, 981, 57, 155, 717, 446, 8, 685, 479, 647, 541, 627, 886, 439, 180, 270, 766, 998, 306, 308, 233, 715, 813, 913, 799, 873, 751, 851, 236, 676, 213, 587, 75, 991, 27, 971, 374, 171, 483, 286, 335, 936, 353, 626, 900, 471, 773, 638, 175, 678, 793, 935, 790, 533, 323, 517, 671, 521, 927, 125, 543, 826, 367, 800, 426, 129, 44, 665, 220, 751, 566, 278, 934, 476, 672, 407, 16, 938, 78, 85, 32, 144, 943, 219, 682, 417, 829, 904, 199, 264, 45, 318, 632, 558, 666, 81, 40, 357, 949, 688, 441, 725, 148, 508, 188, 267, 36, 785, 26, 532, 221, 308, 637, 598, 956, 169, 439, 50, 330, 449, 983, 463, 298, 10, 294, 84, 377, 535, 588, 94, 648, 785, 942, 842, 611, 203, 118, 918, 795, 758, 34, 315, 358, 672, 498, 989, 131, 181, 553, 695, 636, 58, 236, 999, 349, 142, 209, 337, 51, 483, 976, 946, 408, 169, 156, 877, 66, 853, 171, 694, 293, 372, 829, 940, 391, 917, 925, 309, 404, 935, 555, 246, 623, 486, 542, 810, 523, 550, 410, 961, 214, 934, 322, 448, 859, 154, 159, 18, 672, 572, 490, 231, 902, 559, 634, 862, 597, 517, 15, 716, 825, 327, 876, 173, 378, 998, 511, 361, 198, 874, 339, 653, 301, 876, 448, 245, 847, 712, 172, 275, 164, 77, 13, 449, 476, 520, 831, 452, 8, 696, 867, 880, 690, 412, 420, 148, 874, 483, 404, 869, 299, 492, 803, 230, 478, 739, 352, 588, 476, 169, 687, 977, 295, 185, 804, 517, 327, 729, 502, 273, 85, 981, 870, 209, 56, 782, 347, 957, 134, 971, 151, 859, 481, 531, 695, 560, 550, 353, 625, 362, 561, 572, 905, 790, 399, 229, 269, 280, 732, 223, 76 }, new int[] { 184, 462, 295, 360, 537, 14, 136, 582, 407, 809, 109, 281, 873, 881, 264, 744, 385, 484, 400, 735, 181, 595, 507, 705, 568, 119, 424, 438, 508, 203, 138, 687, 636, 168, 607, 112, 910, 540, 917, 938, 958, 61, 778, 109, 169, 968, 102, 496, 331, 858, 905, 859, 799, 882, 182, 65, 185, 188, 118, 662, 524, 592, 314, 498, 791, 440, 627, 246, 81, 321, 571, 13, 385, 517, 654, 372, 535, 579, 532, 419, 796, 71, 959, 443, 310, 0, 525, 718, 121, 172, 861, 401, 539, 375, 830, 346, 640, 170, 162, 744, 371, 738, 317, 506, 163, 608, 582, 64, 172, 841, 212, 317, 770, 144, 261, 360, 468, 5, 696, 319, 507, 94, 586, 9, 993, 459, 267, 176, 976, 110, 472, 630, 458, 41, 686, 699, 669, 156, 30, 525, 227, 290, 28, 509, 387, 594, 550, 266, 321, 327, 202, 339, 352, 35, 536, 544, 966, 71, 384, 702, 178, 714, 465, 3, 43, 465, 855, 333, 152, 778, 22, 135, 863, 256, 605, 677, 390, 365, 440, 464, 729, 512, 203, 132, 635, 896, 766, 14, 763, 883, 704, 949, 589, 920, 874, 349, 157, 880, 354, 927, 785, 335, 908, 633, 278, 724, 143, 524, 928, 887, 597, 929, 286, 156, 755, 565, 238, 60, 880, 4, 341, 911, 594, 566, 422, 615, 437, 197, 598, 48, 923, 719, 88, 712, 29, 353, 329, 328, 950, 55, 587, 310, 760, 690, 176, 458, 25, 398, 212, 755, 967, 120, 9, 598, 435, 420, 680, 457, 320, 966, 686, 845, 688, 345, 400, 325, 536, 260, 838, 837, 307, 875, 370, 634, 360, 424, 654, 538, 170, 724, 89, 274, 8, 568, 299, 60, 737, 46, 832, 555, 261, 0, 733, 430, 333, 389, 436, 54, 185, 238, 656, 831, 467, 443, 480, 35, 146, 653, 960, 808, 33, 424, 171, 438, 994, 493, 840, 63, 374, 393, 416, 391, 316, 353, 193, 586, 43, 847, 949, 834, 99, 371, 607, 833, 884, 481, 886, 258, 250, 601, 575, 716, 108, 39, 726, 124, 248, 75, 135, 891, 994, 244, 959, 872, 357, 587, 949, 411, 857, 293, 421, 845, 150, 559, 91, 80, 317, 571, 86, 28, 598, 295, 373, 241, 981, 640, 55, 242, 514, 278, 177, 277, 665, 377, 571, 374, 450, 832, 758, 975, 603, 721, 757, 481, 295, 316, 317, 784, 659, 469, 949, 835, 447, 806, 21, 758, 269, 918, 599, 520, 367, 472, 146, 432, 210, 796, 495, 211, 319, 621, 564, 731, 941, 782, 771, 42, 491, 216, 674, 544, 185, 356, 464, 182, 349, 421, 327, 417, 441, 594, 260, 210, 206, 125, 676, 274, 949, 643, 957, 80, 741, 565, 574, 724, 168, 406, 501, 632, 830, 452, 265, 70, 173, 958, 240, 981, 778, 855, 74, 238, 840, 205, 403, 372, 353, 779, 78, 991, 808, 200, 132, 623, 460, 992, 123, 415, 179, 592, 912, 598, 616, 302, 818, 847, 497, 359, 800, 543, 338, 69, 766, 745, 611, 281, 946, 743, 297, 631, 479, 870, 701, 706, 362, 353, 908, 0, 900, 277, 597, 870, 856, 366, 832, 719, 398, 187, 60, 889, 910, 993, 719, 282, 393, 910, 752, 789, 167, 255, 70, 120, 302, 347, 994, 144, 838, 970, 108, 2, 628, 458, 488, 895, 689, 748, 161, 220, 622, 664, 758, 106, 392, 743, 288, 982, 689, 896, 989, 980, 700, 562, 323, 735, 692, 298, 851, 683, 863, 780, 184, 308, 3, 628, 865, 307, 410, 949, 657, 386, 115, 912, 666, 812, 150, 160, 716, 866, 621, 859, 675, 789, 779, 761, 494, 554, 37, 239, 852, 934, 563, 4, 917, 343, 816, 36, 812, 719, 205, 238, 767, 597, 437, 349, 66, 793, 544, 698, 582, 669, 310, 149, 175, 477, 492, 126, 786, 229, 468, 154, 112, 60, 235, 760, 806, 627, 857, 665, 694, 689, 575, 820, 875, 726, 793, 910, 149, 204, 202, 235, 590, 135, 965, 419, 475, 986, 236, 418, 90, 211, 814, 685, 676, 144, 708, 495, 786, 805, 824, 600, 592, 234, 351, 591, 994, 499, 192, 88, 828, 957, 758, 261, 869, 589, 207, 874, 460, 891, 647, 570, 79, 151, 140, 398, 338, 57, 82, 298, 120, 239, 964, 57, 562, 669, 734, 221, 955, 103, 579, 215, 81, 561, 705, 161, 577, 336, 270, 885, 305, 138, 808, 213, 983, 162, 971, 539, 784, 432, 593, 775, 766, 164, 454, 15, 593, 883, 432, 185, 297, 438, 193, 180, 360, 808, 160, 485, 597, 29, 668, 203, 713, 420, 366, 911, 757, 689, 943, 674, 811, 179, 55, 482, 531, 934, 459, 539, 895, 426, 391, 691, 65, 374, 564, 289, 365, 108, 38, 678, 724, 371, 425, 994, 591, 759, 861, 282, 16, 167, 971, 53, 789, 318, 580, 85, 698, 218, 615, 532, 541, 610, 977, 699, 277, 991, 510, 147, 210, 822, 47, 544, 203, 654, 924, 546, 960, 560, 508, 925, 370, 696, 800, 658, 800, 735, 847, 583, 471, 670, 549, 955, 391, 855, 883, 735, 10, 523, 128, 362, 589, 47, 528, 350, 828, 832, 358, 438, 175, 3, 319, 615, 696, 139, 864, 49, 317, 152, 698, 633, 361, 888, 770, 172, 0, 273, 904, 166, 248, 779, 793, 408, 809, 52, 629, 152, 164, 113, 609, 119, 765, 814, 184, 463, 940, 320, 97, 148, 739, 586, 345, 384, 583, 670, 856, 941, 377, 898, 967, 601, 432, 417, 807, 516, 419, 495, 247, 169, 752, 363, 102, 980, 908, 713, 223, 922, 275, 994, 172, 75, 853, 956, 344, 600, 526, 414, 363, 195, 817, 104, 471, 865, 53, 486, 822, 116, 438, 122, 102, 288, 642, 118, 155, 308, 929, 311, 463, 924, 280, 744, 979, 782, 411, 815, 562, 392, 452, 742, 534, 221, 265, 487, 970, 891, 733, 277, 173, 165, 30, 106, 696, 330, 152, 656, 226, 280, 354, 675, 955, 418, 441, 245, 994, 569, 799, 279, 402, 299, 338, 738, 164, 56, 883, 212 })]
        #endregion
        public void TestArraySort(int result, int valueToReach, int N, int[] nbOfCoins, int[] values) => Test<Program.Processers.SortedArrayProcessor>(result, valueToReach, N, nbOfCoins, values);

        //Randomly generated
        [TestCase(7, 49, 1, new int[] { 89 }, new int[] { 8 })]
        [TestCase(-1, 188, 1, new int[] { 3 }, new int[] { 8 })]
        [TestCase(22, 154, 2, new int[] { 66, 76 }, new int[] { 8, 7 })]
        [TestCase(-1, 246, 3, new int[] { 12, 7, 26 }, new int[] { 7, 8, 0 })]
        [TestCase(45, 134, 4, new int[] { 54, 94, 44, 44 }, new int[] { 9, 3, 6, 9 })]
        [TestCase(121, 366, 5, new int[] { 94, 90, 71, 23, 82 }, new int[] { 6, 2, 8, 6, 9 })]
        //2nd Serie
        [TestCase(18, 139, 1, new int[] { 54 }, new int[] { 8 })]
        [TestCase(13, 86, 2, new int[] { 59, 87 }, new int[] { 9, 7 })]
        [TestCase(65, 124, 3, new int[] { 67, 44, 56 }, new int[] { 9, 0, 6 })]
        [TestCase(26, 130, 4, new int[] { 98, 19, 23, 75 }, new int[] { 5, 7, 7, 9 })]
        [TestCase(98, 7, 5, new int[] { 4, 92, 18, 96, 94 }, new int[] { 8, 2, 9, 2, 0 })]
        //HandMade
        [TestCase(3, 14, 2, new int[] { 2, 2 }, new int[] { 6, 5 })]
        [TestCase(3, 9, 1, new int[] { 3 }, new int[] { 4 })]
        #region MassiveTest
        [TestCase(2338, 366, 1000, new int[] { 32, 994, 135, 260, 782, 17, 965, 400, 401, 745, 144, 83, 656, 944, 942, 703, 542, 131, 575, 190, 381, 176, 988, 942, 236, 888, 466, 785, 40, 866, 5, 981, 418, 274, 119, 479, 893, 368, 506, 914, 609, 223, 817, 713, 336, 585, 870, 24, 530, 739, 512, 699, 453, 757, 850, 452, 283, 866, 386, 288, 727, 330, 29, 853, 389, 888, 460, 8, 969, 585, 20, 87, 882, 579, 550, 716, 986, 818, 29, 519, 211, 456, 426, 110, 34, 547, 313, 273, 190, 492, 545, 73, 317, 972, 491, 797, 407, 996, 570, 729, 428, 971, 520, 272, 451, 113, 598, 688, 272, 122, 545, 832, 743, 582, 283, 312, 585, 824, 811, 226, 925, 479, 322, 865, 130, 503, 717, 368, 148, 829, 289, 554, 643, 269, 703, 288, 309, 255, 519, 330, 39, 107, 81, 347, 988, 934, 712, 20, 170, 544, 953, 495, 208, 426, 939, 495, 498, 440, 404, 679, 888, 716, 131, 562, 853, 328, 672, 854, 241, 816, 545, 624, 859, 223, 979, 380, 793, 86, 650, 762, 22, 615, 174, 369, 188, 139, 204, 952, 58, 151, 769, 593, 220, 372, 742, 643, 607, 926, 921, 344, 600, 486, 583, 577, 181, 935, 877, 542, 29, 805, 839, 919, 26, 190, 879, 233, 237, 835, 894, 430, 877, 131, 769, 412, 856, 598, 805, 561, 371, 388, 537, 538, 491, 357, 92, 614, 205, 123, 582, 928, 234, 929, 520, 184, 707, 839, 39, 569, 638, 702, 345, 852, 52, 579, 918, 549, 286, 199, 151, 753, 948, 104, 224, 368, 87, 451, 106, 271, 918, 722, 160, 19, 79, 269, 154, 342, 817, 637, 470, 741, 386, 142, 754, 74, 407, 755, 15, 227, 9, 493, 140, 796, 666, 876, 83, 132, 393, 807, 852, 877, 411, 213, 193, 559, 36, 255, 274, 634, 722, 368, 858, 618, 379, 14, 157, 161, 656, 24, 213, 395, 863, 829, 734, 62, 171, 128, 182, 261, 393, 112, 833, 538, 880, 378, 404, 206, 362, 328, 514, 684, 190, 360, 811, 77, 203, 854, 185, 589, 468, 628, 918, 799, 223, 818, 215, 165, 76, 428, 404, 946, 569, 655, 374, 122, 515, 696, 470, 458, 392, 823, 989, 696, 978, 564, 873, 547, 360, 399, 270, 317, 126, 878, 245, 506, 238, 83, 588, 112, 212, 646, 587, 134, 841, 388, 817, 964, 924, 728, 28, 105, 828, 548, 41, 177, 931, 859, 101, 848, 753, 431, 408, 233, 152, 738, 480, 706, 201, 743, 126, 867, 26, 138, 417, 841, 191, 875, 404, 846, 177, 832, 929, 241, 788, 882, 521, 270, 297, 328, 68, 394, 383, 470, 465, 671, 988, 534, 312, 774, 896, 377, 663, 845, 576, 345, 426, 243, 998, 719, 803, 944, 706, 407, 47, 614, 598, 984, 429, 918, 964, 516, 401, 341, 920, 675, 894, 284, 594, 504, 861, 173, 841, 380, 229, 725, 614, 847, 444, 688, 686, 41, 17, 590, 577, 310, 727, 107, 738, 804, 102, 432, 98, 364, 624, 504, 581, 275, 479, 966, 10, 412, 555, 640, 273, 47, 269, 440, 344, 592, 215, 830, 26, 40, 407, 253, 676, 738, 801, 958, 344, 651, 560, 774, 556, 443, 663, 296, 89, 922, 728, 725, 278, 528, 514, 935, 204, 360, 250, 705, 587, 346, 809, 841, 319, 49, 581, 192, 45, 272, 134, 499, 175, 51, 915, 543, 932, 807, 806, 106, 168, 12, 296, 724, 396, 460, 343, 987, 918, 218, 859, 658, 410, 122, 517, 294, 593, 377, 971, 94, 54, 725, 967, 360, 979, 490, 400, 637, 200, 660, 584, 388, 341, 857, 906, 559, 695, 213, 904, 922, 631, 803, 757, 310, 78, 572, 235, 85, 65, 475, 535, 186, 528, 78, 231, 90, 594, 897, 207, 805, 575, 984, 132, 696, 19, 232, 288, 745, 717, 656, 411, 856, 454, 203, 732, 764, 295, 975, 228, 859, 359, 742, 335, 668, 318, 515, 485, 752, 182, 795, 106, 110, 363, 953, 33, 679, 816, 467, 164, 347, 524, 789, 624, 313, 69, 851, 595, 46, 322, 136, 479, 381, 257, 697, 393, 650, 890, 425, 336, 310, 372, 395, 635, 108, 690, 499, 574, 178, 301, 295, 221, 794, 981, 57, 155, 717, 446, 8, 685, 479, 647, 541, 627, 886, 439, 180, 270, 766, 998, 306, 308, 233, 715, 813, 913, 799, 873, 751, 851, 236, 676, 213, 587, 75, 991, 27, 971, 374, 171, 483, 286, 335, 936, 353, 626, 900, 471, 773, 638, 175, 678, 793, 935, 790, 533, 323, 517, 671, 521, 927, 125, 543, 826, 367, 800, 426, 129, 44, 665, 220, 751, 566, 278, 934, 476, 672, 407, 16, 938, 78, 85, 32, 144, 943, 219, 682, 417, 829, 904, 199, 264, 45, 318, 632, 558, 666, 81, 40, 357, 949, 688, 441, 725, 148, 508, 188, 267, 36, 785, 26, 532, 221, 308, 637, 598, 956, 169, 439, 50, 330, 449, 983, 463, 298, 10, 294, 84, 377, 535, 588, 94, 648, 785, 942, 842, 611, 203, 118, 918, 795, 758, 34, 315, 358, 672, 498, 989, 131, 181, 553, 695, 636, 58, 236, 999, 349, 142, 209, 337, 51, 483, 976, 946, 408, 169, 156, 877, 66, 853, 171, 694, 293, 372, 829, 940, 391, 917, 925, 309, 404, 935, 555, 246, 623, 486, 542, 810, 523, 550, 410, 961, 214, 934, 322, 448, 859, 154, 159, 18, 672, 572, 490, 231, 902, 559, 634, 862, 597, 517, 15, 716, 825, 327, 876, 173, 378, 998, 511, 361, 198, 874, 339, 653, 301, 876, 448, 245, 847, 712, 172, 275, 164, 77, 13, 449, 476, 520, 831, 452, 8, 696, 867, 880, 690, 412, 420, 148, 874, 483, 404, 869, 299, 492, 803, 230, 478, 739, 352, 588, 476, 169, 687, 977, 295, 185, 804, 517, 327, 729, 502, 273, 85, 981, 870, 209, 56, 782, 347, 957, 134, 971, 151, 859, 481, 531, 695, 560, 550, 353, 625, 362, 561, 572, 905, 790, 399, 229, 269, 280, 732, 223, 76 }, new int[] { 184, 462, 295, 360, 537, 14, 136, 582, 407, 809, 109, 281, 873, 881, 264, 744, 385, 484, 400, 735, 181, 595, 507, 705, 568, 119, 424, 438, 508, 203, 138, 687, 636, 168, 607, 112, 910, 540, 917, 938, 958, 61, 778, 109, 169, 968, 102, 496, 331, 858, 905, 859, 799, 882, 182, 65, 185, 188, 118, 662, 524, 592, 314, 498, 791, 440, 627, 246, 81, 321, 571, 13, 385, 517, 654, 372, 535, 579, 532, 419, 796, 71, 959, 443, 310, 0, 525, 718, 121, 172, 861, 401, 539, 375, 830, 346, 640, 170, 162, 744, 371, 738, 317, 506, 163, 608, 582, 64, 172, 841, 212, 317, 770, 144, 261, 360, 468, 5, 696, 319, 507, 94, 586, 9, 993, 459, 267, 176, 976, 110, 472, 630, 458, 41, 686, 699, 669, 156, 30, 525, 227, 290, 28, 509, 387, 594, 550, 266, 321, 327, 202, 339, 352, 35, 536, 544, 966, 71, 384, 702, 178, 714, 465, 3, 43, 465, 855, 333, 152, 778, 22, 135, 863, 256, 605, 677, 390, 365, 440, 464, 729, 512, 203, 132, 635, 896, 766, 14, 763, 883, 704, 949, 589, 920, 874, 349, 157, 880, 354, 927, 785, 335, 908, 633, 278, 724, 143, 524, 928, 887, 597, 929, 286, 156, 755, 565, 238, 60, 880, 4, 341, 911, 594, 566, 422, 615, 437, 197, 598, 48, 923, 719, 88, 712, 29, 353, 329, 328, 950, 55, 587, 310, 760, 690, 176, 458, 25, 398, 212, 755, 967, 120, 9, 598, 435, 420, 680, 457, 320, 966, 686, 845, 688, 345, 400, 325, 536, 260, 838, 837, 307, 875, 370, 634, 360, 424, 654, 538, 170, 724, 89, 274, 8, 568, 299, 60, 737, 46, 832, 555, 261, 0, 733, 430, 333, 389, 436, 54, 185, 238, 656, 831, 467, 443, 480, 35, 146, 653, 960, 808, 33, 424, 171, 438, 994, 493, 840, 63, 374, 393, 416, 391, 316, 353, 193, 586, 43, 847, 949, 834, 99, 371, 607, 833, 884, 481, 886, 258, 250, 601, 575, 716, 108, 39, 726, 124, 248, 75, 135, 891, 994, 244, 959, 872, 357, 587, 949, 411, 857, 293, 421, 845, 150, 559, 91, 80, 317, 571, 86, 28, 598, 295, 373, 241, 981, 640, 55, 242, 514, 278, 177, 277, 665, 377, 571, 374, 450, 832, 758, 975, 603, 721, 757, 481, 295, 316, 317, 784, 659, 469, 949, 835, 447, 806, 21, 758, 269, 918, 599, 520, 367, 472, 146, 432, 210, 796, 495, 211, 319, 621, 564, 731, 941, 782, 771, 42, 491, 216, 674, 544, 185, 356, 464, 182, 349, 421, 327, 417, 441, 594, 260, 210, 206, 125, 676, 274, 949, 643, 957, 80, 741, 565, 574, 724, 168, 406, 501, 632, 830, 452, 265, 70, 173, 958, 240, 981, 778, 855, 74, 238, 840, 205, 403, 372, 353, 779, 78, 991, 808, 200, 132, 623, 460, 992, 123, 415, 179, 592, 912, 598, 616, 302, 818, 847, 497, 359, 800, 543, 338, 69, 766, 745, 611, 281, 946, 743, 297, 631, 479, 870, 701, 706, 362, 353, 908, 0, 900, 277, 597, 870, 856, 366, 832, 719, 398, 187, 60, 889, 910, 993, 719, 282, 393, 910, 752, 789, 167, 255, 70, 120, 302, 347, 994, 144, 838, 970, 108, 2, 628, 458, 488, 895, 689, 748, 161, 220, 622, 664, 758, 106, 392, 743, 288, 982, 689, 896, 989, 980, 700, 562, 323, 735, 692, 298, 851, 683, 863, 780, 184, 308, 3, 628, 865, 307, 410, 949, 657, 386, 115, 912, 666, 812, 150, 160, 716, 866, 621, 859, 675, 789, 779, 761, 494, 554, 37, 239, 852, 934, 563, 4, 917, 343, 816, 36, 812, 719, 205, 238, 767, 597, 437, 349, 66, 793, 544, 698, 582, 669, 310, 149, 175, 477, 492, 126, 786, 229, 468, 154, 112, 60, 235, 760, 806, 627, 857, 665, 694, 689, 575, 820, 875, 726, 793, 910, 149, 204, 202, 235, 590, 135, 965, 419, 475, 986, 236, 418, 90, 211, 814, 685, 676, 144, 708, 495, 786, 805, 824, 600, 592, 234, 351, 591, 994, 499, 192, 88, 828, 957, 758, 261, 869, 589, 207, 874, 460, 891, 647, 570, 79, 151, 140, 398, 338, 57, 82, 298, 120, 239, 964, 57, 562, 669, 734, 221, 955, 103, 579, 215, 81, 561, 705, 161, 577, 336, 270, 885, 305, 138, 808, 213, 983, 162, 971, 539, 784, 432, 593, 775, 766, 164, 454, 15, 593, 883, 432, 185, 297, 438, 193, 180, 360, 808, 160, 485, 597, 29, 668, 203, 713, 420, 366, 911, 757, 689, 943, 674, 811, 179, 55, 482, 531, 934, 459, 539, 895, 426, 391, 691, 65, 374, 564, 289, 365, 108, 38, 678, 724, 371, 425, 994, 591, 759, 861, 282, 16, 167, 971, 53, 789, 318, 580, 85, 698, 218, 615, 532, 541, 610, 977, 699, 277, 991, 510, 147, 210, 822, 47, 544, 203, 654, 924, 546, 960, 560, 508, 925, 370, 696, 800, 658, 800, 735, 847, 583, 471, 670, 549, 955, 391, 855, 883, 735, 10, 523, 128, 362, 589, 47, 528, 350, 828, 832, 358, 438, 175, 3, 319, 615, 696, 139, 864, 49, 317, 152, 698, 633, 361, 888, 770, 172, 0, 273, 904, 166, 248, 779, 793, 408, 809, 52, 629, 152, 164, 113, 609, 119, 765, 814, 184, 463, 940, 320, 97, 148, 739, 586, 345, 384, 583, 670, 856, 941, 377, 898, 967, 601, 432, 417, 807, 516, 419, 495, 247, 169, 752, 363, 102, 980, 908, 713, 223, 922, 275, 994, 172, 75, 853, 956, 344, 600, 526, 414, 363, 195, 817, 104, 471, 865, 53, 486, 822, 116, 438, 122, 102, 288, 642, 118, 155, 308, 929, 311, 463, 924, 280, 744, 979, 782, 411, 815, 562, 392, 452, 742, 534, 221, 265, 487, 970, 891, 733, 277, 173, 165, 30, 106, 696, 330, 152, 656, 226, 280, 354, 675, 955, 418, 441, 245, 994, 569, 799, 279, 402, 299, 338, 738, 164, 56, 883, 212 })]
        #endregion
        public void TestArrayMin(int result, int valueToReach, int N, int[] nbOfCoins, int[] values) => Test<Program.Processers.MinArrayProcessor>(result, valueToReach, N, nbOfCoins, values);
    }
}